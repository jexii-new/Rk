{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,mCAAqD;AAErD,SAAgB,eAAe,CAAC,IAAY,EAAE,QAAgB;IAE7D,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;AACzC,CAAC;AAHD,0CAGC;AAED;;GAEG;AACH,SAAgB,sBAAsB,CAA2C,GAAM,EAAE,WAAmB,EAAE,WAAc;IAI3H,IAAI,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,EAC9C;QACC,GAAG,CAAC,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAClD,sBAAsB,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;KAClD;AACF,CAAC;AATD,wDASC;AAED;;GAEG;AACH,SAAgB,eAAe,CAAmB,cAAsB,EAAE,gBAAmB;IAE5F,OAAO,cAAc,KAAK,gBAAgB,CAAA;AAC3C,CAAC;AAHD,0CAGC;AAED,SAAgB,sBAAsB,CAAC,cAAsB,EAAE,gBAAwB;IAEtF,IAAA,uBAAc,EAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;AAClD,CAAC;AAHD,wDAGC;AAED,SAAgB,mBAAmB,CAAmB,cAAsB,EAAE,gBAAmB;IAEhG,IAAA,oBAAW,EAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;AAC/C,CAAC;AAHD,kDAGC;AAED,SAAgB,mBAAmB,CAAyB,QAAgB;IAE3E,OAAO,kBAAkB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC3C,CAAC;AAHD,kDAGC;AAED;;;;GAIG;AACH,SAAgB,kBAAkB,CAA2C,GAAM,EAAE,QAAW;IAE/F,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC;IAEzB,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,EACnC;QACC,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACvB,sBAAsB,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;KAC3C;IAED,OAAO,GAAG,CAAC;AACZ,CAAC;AAXD,gDAWC;AAED,kBAAe,kBAAkB,CAAA","sourcesContent":["import { notStrictEqual, strictEqual } from 'assert';\n\nexport function replaceProtocol(href: string, protocol: string)\n{\n\treturn href.replace(/^[^:]+:/, protocol)\n}\n\n/**\n * @internal\n */\nexport function _fixReplaceURLProtocol<T extends URL, P extends string = string>(url: T, oldProtocol: string, newProtocol: P): asserts url is T & {\n\tprotocol: P,\n}\n{\n\tif (_isSameProtocol(url.protocol, oldProtocol))\n\t{\n\t\turl.href = replaceProtocol(url.href, newProtocol);\n\t\tassertProtocolNotEqual(url.protocol, oldProtocol);\n\t}\n}\n\n/**\n * @internal\n */\nexport function _isSameProtocol<T extends string>(actualProtocol: string, expectedProtocol: T): actualProtocol is T\n{\n\treturn actualProtocol === expectedProtocol\n}\n\nexport function assertProtocolNotEqual(actualProtocol: string, expectedProtocol: string)\n{\n\tnotStrictEqual(actualProtocol, expectedProtocol);\n}\n\nexport function assertProtocolEqual<T extends string>(actualProtocol: string, expectedProtocol: T): asserts actualProtocol is T\n{\n\tstrictEqual(actualProtocol, expectedProtocol);\n}\n\nexport function replaceThisProtocol<T extends URL>(this: T, protocol: string)\n{\n\treturn replaceURLProtocol(this, protocol);\n}\n\n/**\n * helper for avoid node.js can't update protocol for some url\n *\n * @see https://github.com/nodejs/node/issues/39732\n */\nexport function replaceURLProtocol<T extends URL, P extends string = string>(url: T, protocol: P)\n{\n\tconst old = url.protocol;\n\n\tif (!_isSameProtocol(old, protocol))\n\t{\n\t\turl.protocol = protocol\n\t\t_fixReplaceURLProtocol(url, old, protocol);\n\t}\n\n\treturn url;\n}\n\nexport default replaceURLProtocol\n"]}