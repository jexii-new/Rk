"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMethodBuilder = void 0;
const tslib_1 = require("tslib");
/**
 * Created by user on 2019/6/7.
 */
const build_1 = (0, tslib_1.__importDefault)(require("../../decorators/build"));
const bluebird_1 = (0, tslib_1.__importDefault)(require("bluebird"));
const get_http_result_url_1 = require("get-http-result-url");
/**
 * preset type for methodBuilder
 */
function createMethodBuilder(wrapFn) {
    return function (handler, builderOptions = true) {
        var _a, _b;
        if (handler && typeof handler === 'object' && (builderOptions == null || builderOptions === true)) {
            ([builderOptions, handler] = [handler, null]);
        }
        if (typeof builderOptions === 'boolean') {
            builderOptions = {
                autoRequest: builderOptions,
            };
        }
        builderOptions || (builderOptions = {});
        (_a = builderOptions.autoRequest) !== null && _a !== void 0 ? _a : (builderOptions.autoRequest = true);
        if (builderOptions.autoRequest) {
            (_b = builderOptions.returnData) !== null && _b !== void 0 ? _b : (builderOptions.returnData = true);
        }
        if (builderOptions.handler) {
            handler = builderOptions.handler;
        }
        if (handler && typeof handler !== 'function') {
            throw new TypeError(`typeof handler != 'function'`);
        }
        let { autoRequest, disableFallbackReturnValue } = builderOptions;
        const old = handler;
        handler = ((data) => {
            var _a, _b, _c, _d, _e, _f;
            const oldThis = data.thisArgv;
            (_a = data.autoRequest) !== null && _a !== void 0 ? _a : (data.autoRequest = autoRequest);
            (_b = data.disableFallbackReturnValue) !== null && _b !== void 0 ? _b : (data.disableFallbackReturnValue = disableFallbackReturnValue);
            if (wrapFn) {
                data = wrapFn.call(data.thisArgv, data);
                (_c = data.autoRequest) !== null && _c !== void 0 ? _c : (data.autoRequest = autoRequest);
                (_d = data.disableFallbackReturnValue) !== null && _d !== void 0 ? _d : (data.disableFallbackReturnValue = disableFallbackReturnValue);
            }
            if (old) {
                const { thisArgv = data.thisArgv, method = data.method, argv = data.argv } = old.call(oldThis, data) || data;
                (_e = data.autoRequest) !== null && _e !== void 0 ? _e : (data.autoRequest = autoRequest);
                (_f = data.disableFallbackReturnValue) !== null && _f !== void 0 ? _f : (data.disableFallbackReturnValue = disableFallbackReturnValue);
                data = {
                    ...data,
                    thisArgv,
                    method,
                    argv,
                };
            }
            builderOptions.autoRequest = data.autoRequest;
            builderOptions.disableFallbackReturnValue = data.disableFallbackReturnValue;
            if (data.autoRequest && !data.requested) {
                data.requested = true;
                //console.dir(data.thisArgv);
                return {
                    ...data,
                    builderOptions: builderOptions,
                    returnValue: bluebird_1.default
                        .resolve(data.thisArgv.$http(data.requestConfig))
                        .then(function (ret) {
                        var _a, _b;
                        // @ts-ignore
                        data.thisArgv.$returnValue = ret;
                        data.thisArgv.$response = ret;
                        /*
                        // @ts-ignore
                        if (ret?.request?.res?.responseUrl)
                        {
                            // @ts-ignore
                            data.thisArgv.$responseUrl = ret.request.res.responseUrl;
                        }
                         */
                        data.thisArgv.$responseUrl = (_b = (_a = (0, get_http_result_url_1.resultToURL)(ret, {
                            ignoreError: true,
                        })) === null || _a === void 0 ? void 0 : _a.href) !== null && _b !== void 0 ? _b : data.thisArgv.$responseUrl;
                        if (builderOptions.returnData) {
                            // @ts-ignore
                            data.thisArgv.$returnValueSource = data.thisArgv.$returnValue;
                            return data.thisArgv.$returnValue = ret.data;
                        }
                        return ret;
                    }),
                };
            }
            return {
                ...data,
                builderOptions: builderOptions,
            };
        });
        return (0, build_1.default)(handler);
    };
}
exports.createMethodBuilder = createMethodBuilder;
exports.default = createMethodBuilder;
//# sourceMappingURL=build.js.map